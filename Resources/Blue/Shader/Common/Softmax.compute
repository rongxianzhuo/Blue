#pragma kernel Forward
#pragma kernel Backward

uint count;
uint j1;
uint j2;
StructuredBuffer<float> a;
StructuredBuffer<float> rw_b;
StructuredBuffer<float> b_gradient;
RWStructuredBuffer<float> b;
RWStructuredBuffer<float> a_gradient;

[numthreads(512, 1, 1)]
void Forward(uint3 id : SV_DispatchThreadID)
{
    const uint start = id.x - (id.x % j1) / j2 * j2;
    float max_x = a[start];
    for (uint i = 1; i < count; i++)
    {
        const float x = a[start + i * j2];
        if (x > max_x) max_x = x;
    }
    float sum = 0.0;
    for (uint j = 0; j < count; j++)
    {
        sum += exp(a[start + j * j2] - max_x);
    }
    b[id.x] = exp(a[id.x] - max_x) / sum;
}

[numthreads(512, 1, 1)]
void Backward(uint3 id : SV_DispatchThreadID)
{
    const uint start = id.x - (id.x % j1) / j2 * j2;
    float sum = 0.0;
    for (uint j = 0; j < count; j++)
    {
        sum += rw_b[start + j * j2] * b_gradient[start + j * j2];
    }
    a_gradient[id.x] += rw_b[id.x] * (b_gradient[id.x] - sum);
}