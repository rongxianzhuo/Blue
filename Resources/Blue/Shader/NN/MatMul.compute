#pragma kernel Forward
#pragma kernel BackwardLeft
#pragma kernel BackwardRight
#include "../Common.cginc"

uint lw;
uint lh;
uint rw;

uint result_dim_size;
RWStructuredBuffer<float> result;
StructuredBuffer<uint> result_stride;

uint left_dim_size;
StructuredBuffer<float> left;
StructuredBuffer<uint> left_stride;

uint right_dim_size;
StructuredBuffer<float> right;
StructuredBuffer<uint> right_stride;

uint left_gradient_dim_size;
RWStructuredBuffer<float> left_gradient;
StructuredBuffer<uint> left_gradient_stride;

uint right_gradient_dim_size;
RWStructuredBuffer<float> right_gradient;
StructuredBuffer<uint> right_gradient_stride;

uint result_gradient_dim_size;
StructuredBuffer<float> result_gradient;
StructuredBuffer<uint> result_gradient_stride;


[numthreads(512, 1, 1)]
void Forward(uint3 id : SV_DispatchThreadID)
{
    uint l = calculate_new_index(result_dim_size, id.x, result_dim_size - 1, result_stride, left_stride);
    uint r = calculate_dim_value(result_dim_size, result_dim_size - 1, id.x, result_stride) * right_stride[1];
    float s = 0;
    for (uint i = 0; i < lw; i++)
    {
        s += left[l] * right[r];
        l += left_stride[left_dim_size - 1];
        r += right_stride[0];
    }
    result[id.x] = s;
}


[numthreads(512, 1, 1)]
void BackwardLeft(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= lw * lh) return;
    const uint y = id.x / lw;
    const uint x = id.x - y * lw;
    float s = 0;
    for (uint i = 0; i < lh; i++)
    {
        const uint r_id = right_stride[0] * x + right_stride[1] * i;
        const uint result_id = result_gradient_stride[0] * y + result_gradient_stride[1] * i;
        s += right[r_id] * result_gradient[result_id];
    }
    left_gradient[y * left_gradient_stride[0] + x * left_gradient_stride[1]] = s;
}


[numthreads(512, 1, 1)]
void BackwardRight(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= rw * lw) return;
    const uint y = id.x / rw;
    const uint x = id.x - y * rw;
    float s = 0;
    for (uint j = 0; j < lh; j++)
    {
        s += left[y * left_stride[left_dim_size - 1] + j * left_stride[left_dim_size - 2]]
        * result_gradient[x * result_gradient_stride[result_gradient_dim_size - 1] + j * result_gradient_stride[result_gradient_dim_size - 2]];
    }
    right_gradient[y * right_gradient_stride[0] + x * right_gradient_stride[1]] = s;
}